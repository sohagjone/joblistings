{"ast":null,"code":"var _jsxFileName = \"E:\\\\reactJs_Project\\\\job-listing-react\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { ThemeProvider, Grid, CircularProgress, Box } from \"@material-ui/core\";\nimport theme from \"./theme/theme\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport JobCard from \"./components/Job/JobCard\";\nimport NewJobModel from \"./components/Job/NewJobModel\";\nimport { firestore } from \"./firebase/config\";\nimport app from \"firebase/app\";\nexport default (() => {\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newJobModal, setNewJobModal] = useState(false);\n\n  const fetchJobs = async () => {\n    setLoading(true);\n    const req = await firestore.collection(\"jobs\").orderBy(\"postedOn\", \"desc\").get();\n    const tempJobs = req.docs.map(job => ({ ...job.data(),\n      id: job.id,\n      postedOn: job.data().postedOn.toDate()\n    }));\n    setJobs(tempJobs);\n    setLoading(false);\n  };\n\n  const fetchJobsCustom = async jobSearch => {\n    setLoading(true);\n    const req = await firestore.collection(\"jobs\").orderBy(\"postedOn\", \"desc\").where(\"location\", '=', jobSearch.location).where(\"type\", '=', jobSearch.type).get();\n    const tempJobs = req.docs.map(job => ({ ...job.data(),\n      id: job.id,\n      postedOn: job.data().postedOn.toDate()\n    }));\n    setJobs(tempJobs);\n    setLoading(false);\n  };\n\n  const postJob = async jobDetails => {\n    await firestore.collection(\"jobs\").add({ ...jobDetails,\n      postedOn: app.firestore.FieldValue.serverTimestamp()\n    });\n    fetchJobs();\n  };\n\n  useEffect(() => {\n    fetchJobs();\n  }, []);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    openNewJobModal: () => setNewJobModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewJobModel, {\n    closeModal: () => setNewJobModal(false),\n    newJobModal: newJobModal,\n    postJob: postJob,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mb: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    fetchJobsCustom: fetchJobsCustom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  })) : jobs.map(job => /*#__PURE__*/React.createElement(JobCard, Object.assign({\n    key: job.id\n  }, job, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 31\n    }\n  })))))));\n});","map":{"version":3,"sources":["E:/reactJs_Project/job-listing-react/src/App.js"],"names":["React","useState","useEffect","ThemeProvider","Grid","CircularProgress","Box","theme","Header","SearchBar","JobCard","NewJobModel","firestore","app","jobs","setJobs","loading","setLoading","newJobModal","setNewJobModal","fetchJobs","req","collection","orderBy","get","tempJobs","docs","map","job","data","id","postedOn","toDate","fetchJobsCustom","jobSearch","where","location","type","postJob","jobDetails","add","FieldValue","serverTimestamp"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ThemeProvider, Grid, CircularProgress, Box } from \"@material-ui/core\";\nimport theme from \"./theme/theme\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport JobCard from \"./components/Job/JobCard\";\nimport NewJobModel from \"./components/Job/NewJobModel\";\nimport { firestore } from \"./firebase/config\";\nimport app from \"firebase/app\";\n\nexport default () => {\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newJobModal, setNewJobModal] = useState(false);\n\n  const fetchJobs = async () => {\n    setLoading(true);\n    const req = await firestore\n      .collection(\"jobs\")\n      .orderBy(\"postedOn\", \"desc\")\n      .get();\n    const tempJobs = req.docs.map((job) => ({\n      ...job.data(),\n      id: job.id,\n      postedOn: job.data().postedOn.toDate(),\n    }));\n    setJobs(tempJobs);\n    setLoading(false);\n  };\n\n  const fetchJobsCustom = async jobSearch => {\n    setLoading(true);\n    const req = await firestore\n      .collection(\"jobs\")\n      .orderBy(\"postedOn\", \"desc\")\n      .where(\"location\", '=', jobSearch.location)\n      .where(\"type\", '=', jobSearch.type)\n      .get();\n    const tempJobs = req.docs.map((job) => ({\n      ...job.data(),\n      id: job.id,\n      postedOn: job.data().postedOn.toDate(),\n    }));\n    setJobs(tempJobs);\n    setLoading(false);\n  }\n\n  const postJob = async (jobDetails) => {\n    await firestore.collection(\"jobs\").add({\n      ...jobDetails,\n      postedOn: app.firestore.FieldValue.serverTimestamp(),\n    });\n    fetchJobs();\n  };\n\n  useEffect(() => {\n    fetchJobs();\n  }, []);\n  return (\n    <ThemeProvider theme={theme}>\n      <Header openNewJobModal={() => setNewJobModal(true)} />\n      <NewJobModel\n        closeModal={() => setNewJobModal(false)}\n        newJobModal={newJobModal}\n        postJob={postJob}\n      />\n      <Box mb={3}>\n      <Grid container justify=\"center\">\n        <Grid item xs={10}>\n          <SearchBar fetchJobsCustom = {fetchJobsCustom}/>\n          {loading ? (\n            <Box display=\"flex\" justifyContent=\"center\">\n              <CircularProgress />\n            </Box>\n          ) : (\n            jobs.map((job) => <JobCard key={job.id} {...job} />)\n          )}\n        </Grid>\n      </Grid>\n      </Box>\n    </ThemeProvider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}